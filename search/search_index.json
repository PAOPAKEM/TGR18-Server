{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TGR18 - First Team Meeting","text":"<p>Note: This document includes key points discussed during the TGR18 First team meeting.</p>"},{"location":"#project-infrastructure-overview","title":"Project Infrastructure Overview","text":""},{"location":"#wsl-or-vm-to-run-docker-service","title":"WSL or VM to run docker service ?","text":"<p>Note</p> <p>I will use wsl to run docker service on windows</p>"},{"location":"ref/","title":"Reference","text":""},{"location":"ref/#python-markdown-extensions","title":"Python Markdown Extensions","text":"<p>For full documentation visit squidfunk.github.io/mkdocs-material/.</p>"},{"location":"ref/#custom-your-mkdocs","title":"Custom Your MKDocs","text":"<p>setup</p>"},{"location":"Dashboard/Design/","title":"Dashboard Design Technique","text":"<ol> <li><code>Set Priority</code> : use size &amp; color to make your information stand out (Making a difference).</li> <li><code>Round numbers</code> : Avoid typing numbers with large values \u200b\u200bor lots of digits. Use short abbreviations to make it easy to read and less cluttered.</li> <li><code>Data Ink</code> : Try to cut out unnecessary parts (Non-Data Ink) from the dashboard to leave only necessary information (Data Ink) to present.    </li> <li><code>Arrange data group</code> : Try to keep related data in the same display area, For easy and continuous viewing of the summary data.</li> <li><code>Way of presentation</code> : Choosing a graph to present a set of data that are similar.</li> <li><code>Reading Pattern</code> : People read from left to right, top to bottom, so the information you want to see first should be placed in the top left and largest position.    </li> </ol> <p>Information sourced from a Tech Ninja.</p>"},{"location":"practice/mqtt%20broker/","title":"Step 1 :MQTT Broker Basics","text":""},{"location":"practice/mqtt%20broker/#docker-composeyml-for-mosquitto-mqtt-broker","title":"docker-compose.yml for Mosquitto MQTT broker","text":"<pre><code>version: '3.8'\nservices:\n  mqtt-broker:\n    image: eclipse-mosquitto:latest\n    ports:\n      - \"1883:1883\"  # MQTT default port\n      - \"9001:9001\"  # WebSocket port\n    volumes:\n      - ./mosquitto/config:/mosquitto/config\n      - ./mosquitto/data:/mosquitto/data\n      - ./mosquitto/log:/mosquitto/log\n</code></pre>"},{"location":"practice/mqtt%20broker/#create-mosquitto-configuration","title":"Create Mosquitto configuration","text":"<pre><code>mkdir -p mosquitto/config\n</code></pre>"},{"location":"practice/mqtt%20broker/#create-mosquittoconfigmosquittoconf","title":"Create mosquitto/config/mosquitto.conf","text":"<pre><code>listener 1883\nallow_anonymous true\npersistence true\npersistence_location /mosquitto/data/\nlog_dest file /mosquitto/log/mosquitto.log\n</code></pre>"},{"location":"practice/mqtt%20broker/#start-the-mqtt-broker","title":"Start the MQTT broker","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"practice/mqtt%20broker/#install-required-packages","title":"Install required packages","text":"<pre><code>python -m venv venv\nsource venv/bin/activate\n\npip install paho-mqtt python-dotenv\n</code></pre>"},{"location":"practice/mqtt%20broker/#create-a-publisher-script-mock_sound_publisherpy","title":"Create a publisher script (mock_sound_publisher.py)","text":"<pre><code>import paho.mqtt.client as mqtt\nimport json\nimport time\nimport random\n\n# MQTT Settings\nMQTT_BROKER = \"localhost\"\nMQTT_PORT = 1883\nMQTT_TOPIC = \"sound/raw\"\n\n# Connect to MQTT broker\nclient = mqtt.Client()\n\ndef on_connect(client, userdata, flags, rc):\n    print(f\"Connected with result code {rc}\")\n\nclient.on_connect = on_connect\n\ntry:\n    client.connect(MQTT_BROKER, MQTT_PORT, 60)\nexcept Exception as e:\n    print(f\"Failed to connect to MQTT broker: {e}\")\n    exit(1)\n\n# Start the loop\nclient.loop_start()\n\ntry:\n    while True:\n        # Generate mock sound data\n        mock_data = {\n            \"timestamp\": time.time(),\n            \"amplitude\": random.uniform(0, 100),\n            \"frequency\": random.uniform(20, 20000),\n            \"sample_rate\": 44100\n        }\n\n        # Publish data\n        client.publish(MQTT_TOPIC, json.dumps(mock_data))\n        print(f\"Published: {mock_data}\")\n        time.sleep(1)  # Publish every second\n\nexcept KeyboardInterrupt:\n    print(\"Stopping publisher...\")\n    client.loop_stop()\n    client.disconnect()\n</code></pre>"},{"location":"practice/mqtt%20broker/#create-a-subscriber-script-sound_subscriberpy","title":"Create a subscriber script (sound_subscriber.py)","text":"<pre><code>import paho.mqtt.client as mqtt\nimport json\n\n# MQTT Settings\nMQTT_BROKER = \"localhost\"\nMQTT_PORT = 1883\nMQTT_TOPIC = \"sound/raw\"\n\ndef on_connect(client, userdata, flags, rc):\n    print(f\"Connected with result code {rc}\")\n    client.subscribe(MQTT_TOPIC)\n    print(f\"Subscribed to {MQTT_TOPIC}\")\n\ndef on_message(client, userdata, msg):\n    try:\n        data = json.loads(msg.payload.decode())\n        print(f\"Received: {data}\")\n    except json.JSONDecodeError as e:\n        print(f\"Error decoding message: {e}\")\n\n# Set up MQTT client\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\n\n# Connect to broker\ntry:\n    client.connect(MQTT_BROKER, MQTT_PORT, 60)\nexcept Exception as e:\n    print(f\"Failed to connect to MQTT broker: {e}\")\n    exit(1)\n\n# Start the loop\nprint(\"Starting subscriber...\")\nclient.loop_forever()\n</code></pre> <p>Success</p> <p>When you run the publisher script, it will start publishing messages to the topic every second. The subscriber script will receive these messages and print them to the console.</p> <p> </p>"},{"location":"practice/nodered/","title":"Step 2 :Add nodered","text":""},{"location":"practice/nodered/#update-docker-composeyml-to-include-node-red","title":"Update docker-compose.yml to include Node-RED","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  mqtt-broker:\n    image: eclipse-mosquitto:latest\n    ports:\n      - \"1883:1883\"\n      - \"9001:9001\"\n    volumes:\n      - ./mosquitto/config:/mosquitto/config\n      - ./mosquitto/data:/mosquitto/data\n      - ./mosquitto/log:/mosquitto/log\n    networks:\n      - sound-network\n\n  nodered:\n    image: nodered/node-red:latest\n    ports:\n      - \"1880:1880\"\n    volumes:\n      - ./nodered-data:/data\n    depends_on:\n      - mqtt-broker\n    networks:\n      - sound-network\n\nnetworks:\n  sound-network:\n    driver: bridge\n</code></pre>"},{"location":"practice/nodered/#create-a-directory-for-node-red-data","title":"Create a directory for Node-RED data:","text":"<pre><code>mkdir nodered-data\n</code></pre>"},{"location":"practice/nodered/#start-the-services","title":"Start the services:","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"practice/nodered/#access-node-red","title":"Access Node-RED:","text":"<p>Let's create our first Node-RED flow for sound processing. We'll need to install some additional nodes first. In Node-RED, go to the menu (top right) -&gt; Manage palette -&gt; Install and add these nodes:</p> <pre><code>node-red-contrib-mqtt-broker \nnode-red-dashboard (for visualization)\n</code></pre> <p>Failure</p> <p>Can't connect nodered to mqtt broker in docker (try to look around network configuration)</p>"},{"location":"precamp/MQTT-Docker/","title":"How to Configure Mosquitto MQTT Broker in Docker","text":"<p>I followed the steps outlined in the reference website to complete this lab. Ultimate Guide to Mosquitto Docker Configuration</p>"},{"location":"precamp/MQTT-Docker/#project-structure","title":"Project Structure","text":"<pre><code>    .\n    \u251c\u2500\u2500 docker-compose.yml\n    \u251c\u2500\u2500 mosquitto\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mosquitto.conf\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 data\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mosquitto.db\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 log\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 mosquitto.log\n    \u251c\u2500\u2500 test_conn.py\n    \u2514\u2500\u2500 test_sub.py\n</code></pre>"},{"location":"precamp/MQTT-Docker/#mqtt-broker","title":"MQTT Broker","text":"<p>Create a container from image:</p> <pre><code>docker run -it -d --name mos1 -p 1883:1883 -v /etc/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf -v /etc/mosquitto/passwd_file:/mosquitto/config/passwd_file eclipse-mosquitto:2\n</code></pre> <p>Save the config file mosquitto.conf to /mosquitto/config</p> <pre><code>\u276f cat ./mosquitto/config/mosquitto.conf\n# Place your local configuration in /etc/mosquitto/conf.d/\n#\n# A full description of the configuration file is at\n# /usr/share/doc/mosquitto/examples/mosquitto.conf.example\n\n#pid_file /run/mosquitto/mosquitto.pid\n\npersistence true\npersistence_location /mosquitto/data/\nlog_dest file /mosquitto/log/mosquitto.log\nlog_dest stdout\n\n# include_dir /etc/mosquitto/conf.d\n\nallow_anonymous true\nlistener 1883 0.0.0.0\n</code></pre>"},{"location":"precamp/MQTT-Docker/#mqtt-broker-docker-compose-setup","title":"MQTT Broker Docker-Compose setup","text":"<pre><code>version: \"3.8\"\n\nservices:\n  mosquitto:\n    image: eclipse-mosquitto:2\n    ports:\n      - 1884:1883\n      - 8883:8883\n      - 9001:9001\n    volumes:\n      - ./mosquitto/config:/mosquitto/config\n      - ./mosquitto/data:/mosquitto/data\n      - ./mosquitto/log:/mosquitto/log\n    networks:\n      - mosquitto\nnetworks:\n  mosquitto:\n    name: mosquitto\n    driver: bridge\n</code></pre>"},{"location":"precamp/MQTT-Docker/#python-code-test-connection-and-sub-topic","title":"Python Code test connection and sub topic","text":"<pre><code>import paho.mqtt.client as mqtt\nimport time\n\nbroker_hostname = \"localhost\"\nport = 1883\n\ndef on_connect(client, userdata, flags, return_code):\n    if return_code == 0:\n        print(\"connected\")\n    else:\n        print(\"could not connect, return code:\", return_code)\n\nclient = mqtt.Client(\"Client1\")\n# client.username_pw_set(username=\"user_name\", password=\"password\") # uncomment if you use password auth\nclient.on_connect = on_connect\n\nclient.connect(broker_hostname, port)\nclient.loop_start()\n\ntopic = \"Test\"\nmsg_count = 0\n\ntry:\n    while msg_count &lt; 10:\n        time.sleep(1)\n        msg_count += 1\n        result = client.publish(topic, msg_count)\n        status = result[0]\n        if status == 0:\n            print(\"Message \"+ str(msg_count) + \" is published to topic \" + topic)\n        else:\n            print(\"Failed to send message to topic \" + topic)\n            if not client.is_connected():\n                print(\"Client not connected, exiting...\")\n                break\nfinally:\n    client.disconnect()\n    client.loop_stop()\n</code></pre> <pre><code>import paho.mqtt.client as mqtt\nimport time\n\ndef on_connect(client, userdata, flags, return_code):\n    if return_code == 0:\n        print(\"connected\")\n        client.subscribe(\"Test\")\n    else:\n        print(\"could not connect, return code:\", return_code)\n        client.failed_connect = True\n\n\ndef on_message(client, userdata, message):\n    print(\"Received message: \", str(message.payload.decode(\"utf-8\")))\n\n\nbroker_hostname =\"localhost\"\nport = 1883\n\nclient = mqtt.Client(\"Client2\")\n# client.username_pw_set(username=\"user_name\", password=\"password\") # uncomment if you use password auth\nclient.on_connect = on_connect\nclient.on_message = on_message\nclient.failed_connect = False\n\nclient.connect(broker_hostname, port)\nclient.loop_start()\n\n# this try-finally block ensures that whenever we terminate the program earlier by hitting ctrl+c, it still gracefully exits\ntry:\n    i = 0\n    while i &lt; 15 and client.failed_connect == False:\n        time.sleep(1)\n        i = i + 1\n    if client.failed_connect == True:\n        print('Connection failed, exiting...')\n\nfinally:\n    client.disconnect()\n    client.loop_stop()\n</code></pre> <p>Success</p> <p>MQTT publish/subscribe communication is working correctly between the two programs through an MQTT broker.</p> <p></p>"}]}